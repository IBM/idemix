// IdemixMSPConfig collects all the configuration information for
// an Idemix MSP.

// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: idemixmsp/msp_config.proto

package idemixmsp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IdemixMSPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name holds the identifier of the MSP
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ipk represents the (serialized) issuer public key
	Ipk []byte `protobuf:"bytes,2,opt,name=ipk,proto3" json:"ipk,omitempty"`
	// signer may contain crypto material to configure a default signer
	Signer *IdemixMSPSignerConfig `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
	// revocation_pk is the public key used for revocation of credentials
	RevocationPk []byte `protobuf:"bytes,4,opt,name=revocation_pk,json=revocationPk,proto3" json:"revocation_pk,omitempty"`
	// epoch represents the current epoch (time interval) used for revocation
	Epoch int64 `protobuf:"varint,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// curve_id indicates which Elliptic Curve should be used
	CurveId string `protobuf:"bytes,6,opt,name=curve_id,json=curveId,proto3" json:"curve_id,omitempty"`
}

func (x *IdemixMSPConfig) Reset() {
	*x = IdemixMSPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idemixmsp_msp_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdemixMSPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdemixMSPConfig) ProtoMessage() {}

func (x *IdemixMSPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_idemixmsp_msp_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdemixMSPConfig.ProtoReflect.Descriptor instead.
func (*IdemixMSPConfig) Descriptor() ([]byte, []int) {
	return file_idemixmsp_msp_config_proto_rawDescGZIP(), []int{0}
}

func (x *IdemixMSPConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IdemixMSPConfig) GetIpk() []byte {
	if x != nil {
		return x.Ipk
	}
	return nil
}

func (x *IdemixMSPConfig) GetSigner() *IdemixMSPSignerConfig {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *IdemixMSPConfig) GetRevocationPk() []byte {
	if x != nil {
		return x.RevocationPk
	}
	return nil
}

func (x *IdemixMSPConfig) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *IdemixMSPConfig) GetCurveId() string {
	if x != nil {
		return x.CurveId
	}
	return ""
}

// IdemixMSPSIgnerConfig contains the crypto material to set up an idemix signing identity
type IdemixMSPSignerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cred represents the serialized idemix credential of the default signer
	Cred []byte `protobuf:"bytes,1,opt,name=cred,proto3" json:"cred,omitempty"`
	// sk is the secret key of the default signer, corresponding to credential Cred
	Sk []byte `protobuf:"bytes,2,opt,name=sk,proto3" json:"sk,omitempty"`
	// organizational_unit_identifier defines the organizational unit the default signer is in
	OrganizationalUnitIdentifier string `protobuf:"bytes,3,opt,name=organizational_unit_identifier,json=organizationalUnitIdentifier,proto3" json:"organizational_unit_identifier,omitempty"`
	// role defines whether the default signer is admin, peer, member or client
	Role int32 `protobuf:"varint,4,opt,name=role,proto3" json:"role,omitempty"`
	// enrollment_id contains the enrollment id of this signer
	EnrollmentId string `protobuf:"bytes,5,opt,name=enrollment_id,json=enrollmentId,proto3" json:"enrollment_id,omitempty"`
	// credential_revocation_information contains a serialized CredentialRevocationInformation
	CredentialRevocationInformation []byte `protobuf:"bytes,6,opt,name=credential_revocation_information,json=credentialRevocationInformation,proto3" json:"credential_revocation_information,omitempty"`
}

func (x *IdemixMSPSignerConfig) Reset() {
	*x = IdemixMSPSignerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idemixmsp_msp_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdemixMSPSignerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdemixMSPSignerConfig) ProtoMessage() {}

func (x *IdemixMSPSignerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_idemixmsp_msp_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdemixMSPSignerConfig.ProtoReflect.Descriptor instead.
func (*IdemixMSPSignerConfig) Descriptor() ([]byte, []int) {
	return file_idemixmsp_msp_config_proto_rawDescGZIP(), []int{1}
}

func (x *IdemixMSPSignerConfig) GetCred() []byte {
	if x != nil {
		return x.Cred
	}
	return nil
}

func (x *IdemixMSPSignerConfig) GetSk() []byte {
	if x != nil {
		return x.Sk
	}
	return nil
}

func (x *IdemixMSPSignerConfig) GetOrganizationalUnitIdentifier() string {
	if x != nil {
		return x.OrganizationalUnitIdentifier
	}
	return ""
}

func (x *IdemixMSPSignerConfig) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *IdemixMSPSignerConfig) GetEnrollmentId() string {
	if x != nil {
		return x.EnrollmentId
	}
	return ""
}

func (x *IdemixMSPSignerConfig) GetCredentialRevocationInformation() []byte {
	if x != nil {
		return x.CredentialRevocationInformation
	}
	return nil
}

var File_idemixmsp_msp_config_proto protoreflect.FileDescriptor

var file_idemixmsp_msp_config_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x69, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x6d, 0x73, 0x70, 0x2f, 0x6d, 0x73, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x69, 0x64,
	0x65, 0x6d, 0x69, 0x78, 0x6d, 0x73, 0x70, 0x22, 0xc7, 0x01, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6d,
	0x69, 0x78, 0x4d, 0x53, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x70, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x69, 0x70,
	0x6b, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x69, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x6d, 0x73, 0x70, 0x2e, 0x49, 0x64,
	0x65, 0x6d, 0x69, 0x78, 0x4d, 0x53, 0x50, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x76, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x76, 0x65, 0x49,
	0x64, 0x22, 0x86, 0x02, 0x0a, 0x15, 0x49, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x4d, 0x53, 0x50, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x72, 0x65, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x73, 0x6b, 0x12,
	0x44, 0x0a, 0x1e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4a,
	0x0a, 0x21, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x84, 0x01, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x2e, 0x69, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x6d, 0x73, 0x70, 0x42, 0x0e, 0x4d, 0x73,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x42, 0x4d, 0x2f, 0x69,
	0x64, 0x65, 0x6d, 0x69, 0x78, 0x2f, 0x69, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x6d, 0x73, 0x70, 0xa2,
	0x02, 0x03, 0x49, 0x58, 0x58, 0xaa, 0x02, 0x09, 0x49, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x6d, 0x73,
	0x70, 0xca, 0x02, 0x09, 0x49, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x6d, 0x73, 0x70, 0xe2, 0x02, 0x15,
	0x49, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x6d, 0x73, 0x70, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x49, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x6d, 0x73,
	0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_idemixmsp_msp_config_proto_rawDescOnce sync.Once
	file_idemixmsp_msp_config_proto_rawDescData = file_idemixmsp_msp_config_proto_rawDesc
)

func file_idemixmsp_msp_config_proto_rawDescGZIP() []byte {
	file_idemixmsp_msp_config_proto_rawDescOnce.Do(func() {
		file_idemixmsp_msp_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_idemixmsp_msp_config_proto_rawDescData)
	})
	return file_idemixmsp_msp_config_proto_rawDescData
}

var file_idemixmsp_msp_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_idemixmsp_msp_config_proto_goTypes = []interface{}{
	(*IdemixMSPConfig)(nil),       // 0: idemixmsp.IdemixMSPConfig
	(*IdemixMSPSignerConfig)(nil), // 1: idemixmsp.IdemixMSPSignerConfig
}
var file_idemixmsp_msp_config_proto_depIdxs = []int32{
	1, // 0: idemixmsp.IdemixMSPConfig.signer:type_name -> idemixmsp.IdemixMSPSignerConfig
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_idemixmsp_msp_config_proto_init() }
func file_idemixmsp_msp_config_proto_init() {
	if File_idemixmsp_msp_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_idemixmsp_msp_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdemixMSPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idemixmsp_msp_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdemixMSPSignerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_idemixmsp_msp_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_idemixmsp_msp_config_proto_goTypes,
		DependencyIndexes: file_idemixmsp_msp_config_proto_depIdxs,
		MessageInfos:      file_idemixmsp_msp_config_proto_msgTypes,
	}.Build()
	File_idemixmsp_msp_config_proto = out.File
	file_idemixmsp_msp_config_proto_rawDesc = nil
	file_idemixmsp_msp_config_proto_goTypes = nil
	file_idemixmsp_msp_config_proto_depIdxs = nil
}
