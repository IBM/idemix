// Code generated by protoc-gen-go. DO NOT EDIT.
// source: msp/msp_config.proto

package msp

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// IdemixMSPConfig collects all the configuration information for
// an Idemix MSP.
type IdemixMSPConfig struct {
	// Name holds the identifier of the MSP
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ipk represents the (serialized) issuer public key
	Ipk []byte `protobuf:"bytes,2,opt,name=ipk,proto3" json:"ipk,omitempty"`
	// signer may contain crypto material to configure a default signer
	Signer *IdemixMSPSignerConfig `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
	// revocation_pk is the public key used for revocation of credentials
	RevocationPk []byte `protobuf:"bytes,4,opt,name=revocation_pk,json=revocationPk,proto3" json:"revocation_pk,omitempty"`
	// epoch represents the current epoch (time interval) used for revocation
	Epoch int64 `protobuf:"varint,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Which Elliptic Curve should be used
	CurveId              string   `protobuf:"bytes,6,opt,name=curve_id,json=curveId,proto3" json:"curve_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdemixMSPConfig) Reset()         { *m = IdemixMSPConfig{} }
func (m *IdemixMSPConfig) String() string { return proto.CompactTextString(m) }
func (*IdemixMSPConfig) ProtoMessage()    {}
func (*IdemixMSPConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c34771f529d9d1a, []int{3}
}

func (m *IdemixMSPConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdemixMSPConfig.Unmarshal(m, b)
}
func (m *IdemixMSPConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdemixMSPConfig.Marshal(b, m, deterministic)
}
func (m *IdemixMSPConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdemixMSPConfig.Merge(m, src)
}
func (m *IdemixMSPConfig) XXX_Size() int {
	return xxx_messageInfo_IdemixMSPConfig.Size(m)
}
func (m *IdemixMSPConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IdemixMSPConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IdemixMSPConfig proto.InternalMessageInfo

func (m *IdemixMSPConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IdemixMSPConfig) GetIpk() []byte {
	if m != nil {
		return m.Ipk
	}
	return nil
}

func (m *IdemixMSPConfig) GetSigner() *IdemixMSPSignerConfig {
	if m != nil {
		return m.Signer
	}
	return nil
}

func (m *IdemixMSPConfig) GetRevocationPk() []byte {
	if m != nil {
		return m.RevocationPk
	}
	return nil
}

func (m *IdemixMSPConfig) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *IdemixMSPConfig) GetCurveId() string {
	if m != nil {
		return m.CurveId
	}
	return ""
}

// IdemixMSPSIgnerConfig contains the crypto material to set up an idemix signing identity
type IdemixMSPSignerConfig struct {
	// cred represents the serialized idemix credential of the default signer
	Cred []byte `protobuf:"bytes,1,opt,name=cred,proto3" json:"cred,omitempty"`
	// sk is the secret key of the default signer, corresponding to credential Cred
	Sk []byte `protobuf:"bytes,2,opt,name=sk,proto3" json:"sk,omitempty"`
	// organizational_unit_identifier defines the organizational unit the default signer is in
	OrganizationalUnitIdentifier string `protobuf:"bytes,3,opt,name=organizational_unit_identifier,json=organizationalUnitIdentifier,proto3" json:"organizational_unit_identifier,omitempty"`
	// role defines whether the default signer is admin, peer, member or client
	Role int32 `protobuf:"varint,4,opt,name=role,proto3" json:"role,omitempty"`
	// enrollment_id contains the enrollment id of this signer
	EnrollmentId string `protobuf:"bytes,5,opt,name=enrollment_id,json=enrollmentId,proto3" json:"enrollment_id,omitempty"`
	// credential_revocation_information contains a serialized CredentialRevocationInformation
	CredentialRevocationInformation []byte   `protobuf:"bytes,6,opt,name=credential_revocation_information,json=credentialRevocationInformation,proto3" json:"credential_revocation_information,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *IdemixMSPSignerConfig) Reset()         { *m = IdemixMSPSignerConfig{} }
func (m *IdemixMSPSignerConfig) String() string { return proto.CompactTextString(m) }
func (*IdemixMSPSignerConfig) ProtoMessage()    {}
func (*IdemixMSPSignerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c34771f529d9d1a, []int{4}
}

func (m *IdemixMSPSignerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdemixMSPSignerConfig.Unmarshal(m, b)
}
func (m *IdemixMSPSignerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdemixMSPSignerConfig.Marshal(b, m, deterministic)
}
func (m *IdemixMSPSignerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdemixMSPSignerConfig.Merge(m, src)
}
func (m *IdemixMSPSignerConfig) XXX_Size() int {
	return xxx_messageInfo_IdemixMSPSignerConfig.Size(m)
}
func (m *IdemixMSPSignerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IdemixMSPSignerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IdemixMSPSignerConfig proto.InternalMessageInfo

func (m *IdemixMSPSignerConfig) GetCred() []byte {
	if m != nil {
		return m.Cred
	}
	return nil
}

func (m *IdemixMSPSignerConfig) GetSk() []byte {
	if m != nil {
		return m.Sk
	}
	return nil
}

func (m *IdemixMSPSignerConfig) GetOrganizationalUnitIdentifier() string {
	if m != nil {
		return m.OrganizationalUnitIdentifier
	}
	return ""
}

func (m *IdemixMSPSignerConfig) GetRole() int32 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *IdemixMSPSignerConfig) GetEnrollmentId() string {
	if m != nil {
		return m.EnrollmentId
	}
	return ""
}

func (m *IdemixMSPSignerConfig) GetCredentialRevocationInformation() []byte {
	if m != nil {
		return m.CredentialRevocationInformation
	}
	return nil
}

func init() {
	proto.RegisterType((*IdemixMSPConfig)(nil), "msp.IdemixMSPConfig")
	proto.RegisterType((*IdemixMSPSignerConfig)(nil), "msp.IdemixMSPSignerConfig")
}

func init() { proto.RegisterFile("msp/msp_config.proto", fileDescriptor_9c34771f529d9d1a) }

var fileDescriptor_9c34771f529d9d1a = []byte{
	// 900 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x6e, 0xeb, 0x44,
	0x10, 0x56, 0x7e, 0xdb, 0x4c, 0x9c, 0xa4, 0x67, 0xfb, 0x83, 0x41, 0x9c, 0x73, 0xd2, 0x00, 0x22,
	0x12, 0x6a, 0x2a, 0xf5, 0x20, 0x21, 0x21, 0xae, 0x4e, 0xe1, 0x80, 0x39, 0x94, 0x56, 0x5b, 0xf5,
	0x86, 0x1b, 0xcb, 0xb1, 0x37, 0xc9, 0x2a, 0xb6, 0xd7, 0xda, 0x5d, 0x57, 0x04, 0x71, 0xcd, 0x0b,
	0xf0, 0x22, 0xbc, 0x02, 0x4f, 0xc0, 0x2b, 0xa1, 0x9d, 0xdd, 0x26, 0x4e, 0x5b, 0x05, 0xee, 0x76,
	0x66, 0xbe, 0xf9, 0x3c, 0xf3, 0xcd, 0xec, 0x1a, 0x8e, 0x32, 0x55, 0x9c, 0x67, 0xaa, 0x08, 0x63,
	0x91, 0xcf, 0xf8, 0x7c, 0x52, 0x48, 0xa1, 0x05, 0x69, 0x64, 0xaa, 0x18, 0x7d, 0x05, 0x9d, 0xab,
	0xdb, 0x9b, 0x4b, 0xf4, 0x13, 0x02, 0x4d, 0xbd, 0x2a, 0x98, 0x5f, 0x1b, 0xd6, 0xc6, 0x2d, 0x8a,
	0x67, 0x72, 0x02, 0x6d, 0x9b, 0xe5, 0xd7, 0x87, 0xb5, 0xb1, 0x47, 0x9d, 0x35, 0xfa, 0xab, 0x09,
	0x83, 0x77, 0xd1, 0x54, 0xf2, 0x78, 0x2b, 0x3f, 0x8f, 0x32, 0x9b, 0xdf, 0xa1, 0x78, 0x26, 0x2f,
	0x01, 0xa4, 0x10, 0x3a, 0x8c, 0x99, 0xd4, 0xca, 0xaf, 0x0f, 0x1b, 0x63, 0x8f, 0x76, 0x8c, 0xe7,
	0xd2, 0x38, 0xc8, 0x19, 0x10, 0x9e, 0x6b, 0x26, 0x33, 0x96, 0xf0, 0x48, 0x33, 0x07, 0x6b, 0x20,
	0xec, 0x45, 0x35, 0x62, 0xe1, 0x27, 0xd0, 0x8e, 0x92, 0x8c, 0xe7, 0xca, 0x6f, 0x22, 0xc4, 0x59,
	0xe4, 0x73, 0x18, 0x48, 0x76, 0x2f, 0xe2, 0x48, 0x73, 0x91, 0x87, 0x29, 0x57, 0xda, 0x6f, 0x21,
	0xa0, 0xbf, 0x71, 0xff, 0xc4, 0x95, 0x26, 0x97, 0x70, 0xa0, 0xf8, 0x3c, 0xe7, 0xf9, 0x3c, 0xe4,
	0x09, 0xcb, 0x35, 0xd7, 0x2b, 0xbf, 0x3d, 0xac, 0x8d, 0xbb, 0x17, 0xfe, 0x24, 0x53, 0xc5, 0xe4,
	0xd6, 0x06, 0x03, 0x17, 0x0b, 0xf2, 0x99, 0xa0, 0x03, 0xb5, 0xed, 0x24, 0x21, 0xbc, 0x16, 0x72,
	0x1e, 0xe5, 0xfc, 0x37, 0x24, 0x8e, 0xd2, 0xb0, 0xcc, 0xb9, 0x76, 0x84, 0x33, 0xce, 0xa4, 0xf2,
	0xf7, 0x86, 0x8d, 0x71, 0xf7, 0xe2, 0x03, 0xe4, 0xb4, 0x32, 0x5d, 0xdf, 0x05, 0xeb, 0x38, 0x7d,
	0xb9, 0x9d, 0x7f, 0x97, 0x73, 0xbd, 0x89, 0x2a, 0xf2, 0x0d, 0xf4, 0x62, 0xb9, 0x2a, 0xb4, 0x70,
	0x13, 0xf3, 0xf7, 0xb1, 0xc4, 0x2a, 0xdd, 0x25, 0xc6, 0xad, 0xf0, 0xd4, 0x8b, 0x2b, 0x16, 0xf9,
	0x14, 0xfa, 0x3a, 0x55, 0x61, 0x45, 0xf6, 0x0e, 0x6a, 0xe1, 0xe9, 0x54, 0xd1, 0xb5, 0xf2, 0x5f,
	0xc2, 0x89, 0x41, 0x3d, 0xa3, 0x3e, 0x20, 0xfa, 0x48, 0xa7, 0x2a, 0x78, 0x32, 0x80, 0xaf, 0x61,
	0x30, 0xc3, 0xef, 0x87, 0xb9, 0x48, 0x58, 0x28, 0x4a, 0xe5, 0x77, 0xb1, 0x36, 0x52, 0xa9, 0xed,
	0x67, 0x91, 0xb0, 0xeb, 0x3b, 0x45, 0x7b, 0xb3, 0x8d, 0x59, 0xaa, 0xd1, 0x9f, 0x35, 0x20, 0x4f,
	0x8b, 0x27, 0x17, 0x70, 0x6c, 0x04, 0x8e, 0x74, 0x29, 0x59, 0xb8, 0x88, 0xd4, 0x22, 0x9c, 0x45,
	0x19, 0x4f, 0x57, 0x6e, 0x8d, 0x0e, 0xd7, 0xc1, 0x1f, 0x22, 0xb5, 0x78, 0x87, 0x21, 0x12, 0xc0,
	0xe9, 0xc3, 0xf8, 0x2a, 0xb2, 0xbb, 0xec, 0x32, 0x8f, 0x8d, 0xac, 0xb8, 0xb0, 0x1d, 0xfa, 0xea,
	0x01, 0xb8, 0x11, 0x18, 0x89, 0x1c, 0x6a, 0xf4, 0x77, 0x0d, 0x06, 0x41, 0xc2, 0x32, 0xfe, 0xeb,
	0xee, 0x45, 0x3e, 0x80, 0x06, 0x2f, 0x96, 0xee, 0x16, 0x98, 0x23, 0xb9, 0x80, 0xb6, 0xa9, 0x8d,
	0x49, 0xbf, 0x81, 0x12, 0x7c, 0x84, 0x12, 0xac, 0xb9, 0x6e, 0x31, 0xe6, 0x26, 0xe4, 0x90, 0xe4,
	0x13, 0xe8, 0x55, 0x16, 0xb5, 0x58, 0xfa, 0x4d, 0xe4, 0xf3, 0x36, 0xce, 0x9b, 0x25, 0x39, 0x82,
	0x16, 0x2b, 0x44, 0xbc, 0xf0, 0x5b, 0xc3, 0xda, 0xb8, 0x41, 0xad, 0x41, 0x3e, 0x84, 0xfd, 0xb8,
	0x94, 0xf7, 0x2c, 0xe4, 0x09, 0xae, 0x6c, 0x87, 0xee, 0xa1, 0x1d, 0x24, 0xa3, 0x3f, 0xea, 0x70,
	0xfc, 0xec, 0x77, 0x4d, 0x27, 0xb1, 0x64, 0x09, 0x76, 0xe2, 0x51, 0x3c, 0x93, 0x3e, 0xd4, 0xd5,
	0x43, 0x23, 0x75, 0xb5, 0x24, 0xdf, 0xc2, 0xab, 0xdd, 0xeb, 0x8c, 0xfd, 0x75, 0xe8, 0xc7, 0xbb,
	0x96, 0xd6, 0x7c, 0x49, 0x8a, 0x94, 0x61, 0x43, 0x2d, 0x8a, 0x67, 0xd3, 0x2d, 0xcb, 0xa5, 0x48,
	0xd3, 0x8c, 0xe5, 0x86, 0x10, 0x1b, 0xea, 0x50, 0x6f, 0xe3, 0x0c, 0x12, 0xf2, 0x23, 0x9c, 0x9a,
	0xb2, 0x0c, 0x51, 0x94, 0x86, 0x15, 0x75, 0x78, 0x3e, 0x13, 0x32, 0xc3, 0x33, 0x36, 0xec, 0xd1,
	0xd7, 0x1b, 0x20, 0x5d, 0xe3, 0x82, 0x0d, 0x6c, 0x24, 0xe0, 0xf0, 0x99, 0x1b, 0x6c, 0xea, 0x28,
	0xca, 0x69, 0xca, 0xe3, 0xd0, 0x0d, 0xcc, 0xca, 0xe1, 0x59, 0xa7, 0x15, 0x8c, 0xbc, 0x81, 0x7e,
	0x21, 0xf9, 0xbd, 0xb9, 0x07, 0x0e, 0x55, 0xc7, 0xb1, 0x7a, 0x38, 0xd6, 0xf7, 0xcc, 0x3e, 0x06,
	0x3d, 0x87, 0xb1, 0x49, 0xa3, 0x5b, 0xd8, 0x73, 0x11, 0xf2, 0x19, 0xf4, 0x97, 0xac, 0xba, 0x8e,
	0x6e, 0x7d, 0x7a, 0x4b, 0x56, 0xd9, 0x3d, 0x72, 0x0a, 0x9e, 0x81, 0x65, 0x91, 0x66, 0x92, 0x47,
	0xa9, 0x9b, 0x43, 0x77, 0xc9, 0x56, 0x57, 0xce, 0x35, 0xfa, 0xfd, 0xe1, 0x9e, 0x54, 0xdf, 0x0c,
	0x32, 0x84, 0xae, 0xb9, 0x9f, 0x7c, 0xc6, 0xe3, 0x48, 0x33, 0xd7, 0x42, 0xd5, 0xf5, 0x3f, 0x06,
	0x59, 0xff, 0xef, 0x41, 0x8e, 0xfe, 0xa9, 0x43, 0x6f, 0xeb, 0x1e, 0x9b, 0x57, 0x97, 0xe5, 0xd1,
	0x34, 0xb5, 0x1f, 0xdd, 0xa7, 0xce, 0x22, 0x01, 0x1c, 0xc5, 0x29, 0x37, 0xa3, 0x15, 0xe5, 0xe3,
	0xaf, 0xec, 0x78, 0xfc, 0x88, 0x4d, 0xba, 0x2e, 0x2b, 0xcd, 0x7d, 0x07, 0xa4, 0x60, 0x4c, 0x3e,
	0x22, 0x6a, 0xec, 0x26, 0x3a, 0x30, 0x29, 0x5b, 0x34, 0xdf, 0xc3, 0x21, 0xfe, 0x11, 0x1e, 0xf1,
	0x34, 0x77, 0xf3, 0xbc, 0xc0, 0x9c, 0x2d, 0xa2, 0xf7, 0x70, 0x2c, 0x64, 0xc2, 0xe4, 0x93, 0x92,
	0x5a, 0xbb, 0xa9, 0x0e, 0x5d, 0x56, 0x95, 0xec, 0xed, 0x14, 0x4e, 0x85, 0x9c, 0x4f, 0x16, 0xab,
	0x82, 0xc9, 0x94, 0x25, 0x73, 0x26, 0x27, 0xf6, 0x65, 0xb4, 0x7f, 0x62, 0x65, 0xc8, 0xde, 0x1e,
	0x5c, 0xa9, 0xc2, 0x5e, 0xda, 0x9b, 0x28, 0x5e, 0x46, 0x73, 0xf6, 0xcb, 0x17, 0x73, 0xae, 0x17,
	0xe5, 0x74, 0x12, 0x8b, 0xec, 0xbc, 0x92, 0x7b, 0x6e, 0x73, 0xcf, 0x6c, 0xee, 0xd9, 0x5c, 0x98,
	0x5f, 0xfb, 0xb4, 0x8d, 0xe6, 0x9b, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x49, 0x3f, 0xef, 0xd5,
	0xec, 0x07, 0x00, 0x00,
}
