// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"crypto/ecdsa"
	"sync"

	"github.com/IBM/idemix/bccsp/types"
	math "github.com/IBM/mathlib"
)

type SignatureScheme struct {
	AuditNymEidStub        func(types.IssuerPublicKey, int, int, []byte, string, *math.Zr, types.AuditVerificationType) error
	auditNymEidMutex       sync.RWMutex
	auditNymEidArgsForCall []struct {
		arg1 types.IssuerPublicKey
		arg2 int
		arg3 int
		arg4 []byte
		arg5 string
		arg6 *math.Zr
		arg7 types.AuditVerificationType
	}
	auditNymEidReturns struct {
		result1 error
	}
	auditNymEidReturnsOnCall map[int]struct {
		result1 error
	}
	AuditNymRhStub        func(types.IssuerPublicKey, int, int, []byte, string, *math.Zr, types.AuditVerificationType) error
	auditNymRhMutex       sync.RWMutex
	auditNymRhArgsForCall []struct {
		arg1 types.IssuerPublicKey
		arg2 int
		arg3 int
		arg4 []byte
		arg5 string
		arg6 *math.Zr
		arg7 types.AuditVerificationType
	}
	auditNymRhReturns struct {
		result1 error
	}
	auditNymRhReturnsOnCall map[int]struct {
		result1 error
	}
	SignStub        func([]byte, *math.Zr, *math.G1, *math.Zr, types.IssuerPublicKey, []types.IdemixAttribute, []byte, int, int, []byte, types.SignatureType, *types.IdemixSignerMetadata) ([]byte, *types.IdemixSignerMetadata, error)
	signMutex       sync.RWMutex
	signArgsForCall []struct {
		arg1  []byte
		arg2  *math.Zr
		arg3  *math.G1
		arg4  *math.Zr
		arg5  types.IssuerPublicKey
		arg6  []types.IdemixAttribute
		arg7  []byte
		arg8  int
		arg9  int
		arg10 []byte
		arg11 types.SignatureType
		arg12 *types.IdemixSignerMetadata
	}
	signReturns struct {
		result1 []byte
		result2 *types.IdemixSignerMetadata
		result3 error
	}
	signReturnsOnCall map[int]struct {
		result1 []byte
		result2 *types.IdemixSignerMetadata
		result3 error
	}
	VerifyStub        func(types.IssuerPublicKey, []byte, []byte, []types.IdemixAttribute, int, int, int, *ecdsa.PublicKey, int, types.VerificationType, *types.IdemixSignerMetadata) error
	verifyMutex       sync.RWMutex
	verifyArgsForCall []struct {
		arg1  types.IssuerPublicKey
		arg2  []byte
		arg3  []byte
		arg4  []types.IdemixAttribute
		arg5  int
		arg6  int
		arg7  int
		arg8  *ecdsa.PublicKey
		arg9  int
		arg10 types.VerificationType
		arg11 *types.IdemixSignerMetadata
	}
	verifyReturns struct {
		result1 error
	}
	verifyReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SignatureScheme) AuditNymEid(arg1 types.IssuerPublicKey, arg2 int, arg3 int, arg4 []byte, arg5 string, arg6 *math.Zr, arg7 types.AuditVerificationType) error {
	var arg4Copy []byte
	if arg4 != nil {
		arg4Copy = make([]byte, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.auditNymEidMutex.Lock()
	ret, specificReturn := fake.auditNymEidReturnsOnCall[len(fake.auditNymEidArgsForCall)]
	fake.auditNymEidArgsForCall = append(fake.auditNymEidArgsForCall, struct {
		arg1 types.IssuerPublicKey
		arg2 int
		arg3 int
		arg4 []byte
		arg5 string
		arg6 *math.Zr
		arg7 types.AuditVerificationType
	}{arg1, arg2, arg3, arg4Copy, arg5, arg6, arg7})
	stub := fake.AuditNymEidStub
	fakeReturns := fake.auditNymEidReturns
	fake.recordInvocation("AuditNymEid", []interface{}{arg1, arg2, arg3, arg4Copy, arg5, arg6, arg7})
	fake.auditNymEidMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *SignatureScheme) AuditNymEidCallCount() int {
	fake.auditNymEidMutex.RLock()
	defer fake.auditNymEidMutex.RUnlock()
	return len(fake.auditNymEidArgsForCall)
}

func (fake *SignatureScheme) AuditNymEidCalls(stub func(types.IssuerPublicKey, int, int, []byte, string, *math.Zr, types.AuditVerificationType) error) {
	fake.auditNymEidMutex.Lock()
	defer fake.auditNymEidMutex.Unlock()
	fake.AuditNymEidStub = stub
}

func (fake *SignatureScheme) AuditNymEidArgsForCall(i int) (types.IssuerPublicKey, int, int, []byte, string, *math.Zr, types.AuditVerificationType) {
	fake.auditNymEidMutex.RLock()
	defer fake.auditNymEidMutex.RUnlock()
	argsForCall := fake.auditNymEidArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7
}

func (fake *SignatureScheme) AuditNymEidReturns(result1 error) {
	fake.auditNymEidMutex.Lock()
	defer fake.auditNymEidMutex.Unlock()
	fake.AuditNymEidStub = nil
	fake.auditNymEidReturns = struct {
		result1 error
	}{result1}
}

func (fake *SignatureScheme) AuditNymEidReturnsOnCall(i int, result1 error) {
	fake.auditNymEidMutex.Lock()
	defer fake.auditNymEidMutex.Unlock()
	fake.AuditNymEidStub = nil
	if fake.auditNymEidReturnsOnCall == nil {
		fake.auditNymEidReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.auditNymEidReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *SignatureScheme) AuditNymRh(arg1 types.IssuerPublicKey, arg2 int, arg3 int, arg4 []byte, arg5 string, arg6 *math.Zr, arg7 types.AuditVerificationType) error {
	var arg4Copy []byte
	if arg4 != nil {
		arg4Copy = make([]byte, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.auditNymRhMutex.Lock()
	ret, specificReturn := fake.auditNymRhReturnsOnCall[len(fake.auditNymRhArgsForCall)]
	fake.auditNymRhArgsForCall = append(fake.auditNymRhArgsForCall, struct {
		arg1 types.IssuerPublicKey
		arg2 int
		arg3 int
		arg4 []byte
		arg5 string
		arg6 *math.Zr
		arg7 types.AuditVerificationType
	}{arg1, arg2, arg3, arg4Copy, arg5, arg6, arg7})
	stub := fake.AuditNymRhStub
	fakeReturns := fake.auditNymRhReturns
	fake.recordInvocation("AuditNymRh", []interface{}{arg1, arg2, arg3, arg4Copy, arg5, arg6, arg7})
	fake.auditNymRhMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *SignatureScheme) AuditNymRhCallCount() int {
	fake.auditNymRhMutex.RLock()
	defer fake.auditNymRhMutex.RUnlock()
	return len(fake.auditNymRhArgsForCall)
}

func (fake *SignatureScheme) AuditNymRhCalls(stub func(types.IssuerPublicKey, int, int, []byte, string, *math.Zr, types.AuditVerificationType) error) {
	fake.auditNymRhMutex.Lock()
	defer fake.auditNymRhMutex.Unlock()
	fake.AuditNymRhStub = stub
}

func (fake *SignatureScheme) AuditNymRhArgsForCall(i int) (types.IssuerPublicKey, int, int, []byte, string, *math.Zr, types.AuditVerificationType) {
	fake.auditNymRhMutex.RLock()
	defer fake.auditNymRhMutex.RUnlock()
	argsForCall := fake.auditNymRhArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7
}

func (fake *SignatureScheme) AuditNymRhReturns(result1 error) {
	fake.auditNymRhMutex.Lock()
	defer fake.auditNymRhMutex.Unlock()
	fake.AuditNymRhStub = nil
	fake.auditNymRhReturns = struct {
		result1 error
	}{result1}
}

func (fake *SignatureScheme) AuditNymRhReturnsOnCall(i int, result1 error) {
	fake.auditNymRhMutex.Lock()
	defer fake.auditNymRhMutex.Unlock()
	fake.AuditNymRhStub = nil
	if fake.auditNymRhReturnsOnCall == nil {
		fake.auditNymRhReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.auditNymRhReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *SignatureScheme) Sign(arg1 []byte, arg2 *math.Zr, arg3 *math.G1, arg4 *math.Zr, arg5 types.IssuerPublicKey, arg6 []types.IdemixAttribute, arg7 []byte, arg8 int, arg9 int, arg10 []byte, arg11 types.SignatureType, arg12 *types.IdemixSignerMetadata) ([]byte, *types.IdemixSignerMetadata, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	var arg6Copy []types.IdemixAttribute
	if arg6 != nil {
		arg6Copy = make([]types.IdemixAttribute, len(arg6))
		copy(arg6Copy, arg6)
	}
	var arg7Copy []byte
	if arg7 != nil {
		arg7Copy = make([]byte, len(arg7))
		copy(arg7Copy, arg7)
	}
	var arg10Copy []byte
	if arg10 != nil {
		arg10Copy = make([]byte, len(arg10))
		copy(arg10Copy, arg10)
	}
	fake.signMutex.Lock()
	ret, specificReturn := fake.signReturnsOnCall[len(fake.signArgsForCall)]
	fake.signArgsForCall = append(fake.signArgsForCall, struct {
		arg1  []byte
		arg2  *math.Zr
		arg3  *math.G1
		arg4  *math.Zr
		arg5  types.IssuerPublicKey
		arg6  []types.IdemixAttribute
		arg7  []byte
		arg8  int
		arg9  int
		arg10 []byte
		arg11 types.SignatureType
		arg12 *types.IdemixSignerMetadata
	}{arg1Copy, arg2, arg3, arg4, arg5, arg6Copy, arg7Copy, arg8, arg9, arg10Copy, arg11, arg12})
	stub := fake.SignStub
	fakeReturns := fake.signReturns
	fake.recordInvocation("Sign", []interface{}{arg1Copy, arg2, arg3, arg4, arg5, arg6Copy, arg7Copy, arg8, arg9, arg10Copy, arg11, arg12})
	fake.signMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *SignatureScheme) SignCallCount() int {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	return len(fake.signArgsForCall)
}

func (fake *SignatureScheme) SignCalls(stub func([]byte, *math.Zr, *math.G1, *math.Zr, types.IssuerPublicKey, []types.IdemixAttribute, []byte, int, int, []byte, types.SignatureType, *types.IdemixSignerMetadata) ([]byte, *types.IdemixSignerMetadata, error)) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = stub
}

func (fake *SignatureScheme) SignArgsForCall(i int) ([]byte, *math.Zr, *math.G1, *math.Zr, types.IssuerPublicKey, []types.IdemixAttribute, []byte, int, int, []byte, types.SignatureType, *types.IdemixSignerMetadata) {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	argsForCall := fake.signArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8, argsForCall.arg9, argsForCall.arg10, argsForCall.arg11, argsForCall.arg12
}

func (fake *SignatureScheme) SignReturns(result1 []byte, result2 *types.IdemixSignerMetadata, result3 error) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = nil
	fake.signReturns = struct {
		result1 []byte
		result2 *types.IdemixSignerMetadata
		result3 error
	}{result1, result2, result3}
}

func (fake *SignatureScheme) SignReturnsOnCall(i int, result1 []byte, result2 *types.IdemixSignerMetadata, result3 error) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = nil
	if fake.signReturnsOnCall == nil {
		fake.signReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 *types.IdemixSignerMetadata
			result3 error
		})
	}
	fake.signReturnsOnCall[i] = struct {
		result1 []byte
		result2 *types.IdemixSignerMetadata
		result3 error
	}{result1, result2, result3}
}

func (fake *SignatureScheme) Verify(arg1 types.IssuerPublicKey, arg2 []byte, arg3 []byte, arg4 []types.IdemixAttribute, arg5 int, arg6 int, arg7 int, arg8 *ecdsa.PublicKey, arg9 int, arg10 types.VerificationType, arg11 *types.IdemixSignerMetadata) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	var arg3Copy []byte
	if arg3 != nil {
		arg3Copy = make([]byte, len(arg3))
		copy(arg3Copy, arg3)
	}
	var arg4Copy []types.IdemixAttribute
	if arg4 != nil {
		arg4Copy = make([]types.IdemixAttribute, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.verifyMutex.Lock()
	ret, specificReturn := fake.verifyReturnsOnCall[len(fake.verifyArgsForCall)]
	fake.verifyArgsForCall = append(fake.verifyArgsForCall, struct {
		arg1  types.IssuerPublicKey
		arg2  []byte
		arg3  []byte
		arg4  []types.IdemixAttribute
		arg5  int
		arg6  int
		arg7  int
		arg8  *ecdsa.PublicKey
		arg9  int
		arg10 types.VerificationType
		arg11 *types.IdemixSignerMetadata
	}{arg1, arg2Copy, arg3Copy, arg4Copy, arg5, arg6, arg7, arg8, arg9, arg10, arg11})
	stub := fake.VerifyStub
	fakeReturns := fake.verifyReturns
	fake.recordInvocation("Verify", []interface{}{arg1, arg2Copy, arg3Copy, arg4Copy, arg5, arg6, arg7, arg8, arg9, arg10, arg11})
	fake.verifyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *SignatureScheme) VerifyCallCount() int {
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	return len(fake.verifyArgsForCall)
}

func (fake *SignatureScheme) VerifyCalls(stub func(types.IssuerPublicKey, []byte, []byte, []types.IdemixAttribute, int, int, int, *ecdsa.PublicKey, int, types.VerificationType, *types.IdemixSignerMetadata) error) {
	fake.verifyMutex.Lock()
	defer fake.verifyMutex.Unlock()
	fake.VerifyStub = stub
}

func (fake *SignatureScheme) VerifyArgsForCall(i int) (types.IssuerPublicKey, []byte, []byte, []types.IdemixAttribute, int, int, int, *ecdsa.PublicKey, int, types.VerificationType, *types.IdemixSignerMetadata) {
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	argsForCall := fake.verifyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8, argsForCall.arg9, argsForCall.arg10, argsForCall.arg11
}

func (fake *SignatureScheme) VerifyReturns(result1 error) {
	fake.verifyMutex.Lock()
	defer fake.verifyMutex.Unlock()
	fake.VerifyStub = nil
	fake.verifyReturns = struct {
		result1 error
	}{result1}
}

func (fake *SignatureScheme) VerifyReturnsOnCall(i int, result1 error) {
	fake.verifyMutex.Lock()
	defer fake.verifyMutex.Unlock()
	fake.VerifyStub = nil
	if fake.verifyReturnsOnCall == nil {
		fake.verifyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *SignatureScheme) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.auditNymEidMutex.RLock()
	defer fake.auditNymEidMutex.RUnlock()
	fake.auditNymRhMutex.RLock()
	defer fake.auditNymRhMutex.RUnlock()
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SignatureScheme) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ types.SignatureScheme = new(SignatureScheme)
