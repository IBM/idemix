// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"crypto/ecdsa"
	"sync"

	bccsp "github.com/IBM/idemix/bccsp/schemes"
	"github.com/IBM/idemix/bccsp/schemes/dlog/handlers"
	math "github.com/IBM/mathlib"
)

type SignatureScheme struct {
	SignStub        func(cred []byte, sk *math.Zr, Nym *math.G1, RNym *math.Zr, ipk handlers.IssuerPublicKey, attributes []bccsp.IdemixAttribute, msg []byte, rhIndex, eidIndex int, cri []byte, sigType bccsp.SignatureType, metadata *bccsp.IdemixSignerMetadata) ([]byte, *bccsp.IdemixSignerMetadata, error)
	signMutex       sync.RWMutex
	signArgsForCall []struct {
		cred       []byte
		sk         *math.Zr
		Nym        *math.G1
		RNym       *math.Zr
		ipk        handlers.IssuerPublicKey
		attributes []bccsp.IdemixAttribute
		msg        []byte
		rhIndex    int
		eidIndex   int
		cri        []byte
		sigType    bccsp.SignatureType
		metadata   *bccsp.IdemixSignerMetadata
	}
	signReturns struct {
		result1 []byte
		result2 *bccsp.IdemixSignerMetadata
		result3 error
	}
	signReturnsOnCall map[int]struct {
		result1 []byte
		result2 *bccsp.IdemixSignerMetadata
		result3 error
	}
	VerifyStub        func(ipk handlers.IssuerPublicKey, signature, msg []byte, attributes []bccsp.IdemixAttribute, rhIndex, eidIndex int, revocationPublicKey *ecdsa.PublicKey, epoch int, verType bccsp.VerificationType, meta *bccsp.IdemixSignerMetadata) error
	verifyMutex       sync.RWMutex
	verifyArgsForCall []struct {
		ipk                 handlers.IssuerPublicKey
		signature           []byte
		msg                 []byte
		attributes          []bccsp.IdemixAttribute
		rhIndex             int
		eidIndex            int
		revocationPublicKey *ecdsa.PublicKey
		epoch               int
		verType             bccsp.VerificationType
		meta                *bccsp.IdemixSignerMetadata
	}
	verifyReturns struct {
		result1 error
	}
	verifyReturnsOnCall map[int]struct {
		result1 error
	}
	AuditNymEidStub        func(ipk handlers.IssuerPublicKey, eidIndex int, signature []byte, enrollmentID string, RNymEid *math.Zr) error
	auditNymEidMutex       sync.RWMutex
	auditNymEidArgsForCall []struct {
		ipk          handlers.IssuerPublicKey
		eidIndex     int
		signature    []byte
		enrollmentID string
		RNymEid      *math.Zr
	}
	auditNymEidReturns struct {
		result1 error
	}
	auditNymEidReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SignatureScheme) Sign(cred []byte, sk *math.Zr, Nym *math.G1, RNym *math.Zr, ipk handlers.IssuerPublicKey, attributes []bccsp.IdemixAttribute, msg []byte, rhIndex int, eidIndex int, cri []byte, sigType bccsp.SignatureType, metadata *bccsp.IdemixSignerMetadata) ([]byte, *bccsp.IdemixSignerMetadata, error) {
	var credCopy []byte
	if cred != nil {
		credCopy = make([]byte, len(cred))
		copy(credCopy, cred)
	}
	var attributesCopy []bccsp.IdemixAttribute
	if attributes != nil {
		attributesCopy = make([]bccsp.IdemixAttribute, len(attributes))
		copy(attributesCopy, attributes)
	}
	var msgCopy []byte
	if msg != nil {
		msgCopy = make([]byte, len(msg))
		copy(msgCopy, msg)
	}
	var criCopy []byte
	if cri != nil {
		criCopy = make([]byte, len(cri))
		copy(criCopy, cri)
	}
	fake.signMutex.Lock()
	ret, specificReturn := fake.signReturnsOnCall[len(fake.signArgsForCall)]
	fake.signArgsForCall = append(fake.signArgsForCall, struct {
		cred       []byte
		sk         *math.Zr
		Nym        *math.G1
		RNym       *math.Zr
		ipk        handlers.IssuerPublicKey
		attributes []bccsp.IdemixAttribute
		msg        []byte
		rhIndex    int
		eidIndex   int
		cri        []byte
		sigType    bccsp.SignatureType
		metadata   *bccsp.IdemixSignerMetadata
	}{credCopy, sk, Nym, RNym, ipk, attributesCopy, msgCopy, rhIndex, eidIndex, criCopy, sigType, metadata})
	fake.recordInvocation("Sign", []interface{}{credCopy, sk, Nym, RNym, ipk, attributesCopy, msgCopy, rhIndex, eidIndex, criCopy, sigType, metadata})
	fake.signMutex.Unlock()
	if fake.SignStub != nil {
		return fake.SignStub(cred, sk, Nym, RNym, ipk, attributes, msg, rhIndex, eidIndex, cri, sigType, metadata)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.signReturns.result1, fake.signReturns.result2, fake.signReturns.result3
}

func (fake *SignatureScheme) SignCallCount() int {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	return len(fake.signArgsForCall)
}

func (fake *SignatureScheme) SignArgsForCall(i int) ([]byte, *math.Zr, *math.G1, *math.Zr, handlers.IssuerPublicKey, []bccsp.IdemixAttribute, []byte, int, int, []byte, bccsp.SignatureType, *bccsp.IdemixSignerMetadata) {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	return fake.signArgsForCall[i].cred, fake.signArgsForCall[i].sk, fake.signArgsForCall[i].Nym, fake.signArgsForCall[i].RNym, fake.signArgsForCall[i].ipk, fake.signArgsForCall[i].attributes, fake.signArgsForCall[i].msg, fake.signArgsForCall[i].rhIndex, fake.signArgsForCall[i].eidIndex, fake.signArgsForCall[i].cri, fake.signArgsForCall[i].sigType, fake.signArgsForCall[i].metadata
}

func (fake *SignatureScheme) SignReturns(result1 []byte, result2 *bccsp.IdemixSignerMetadata, result3 error) {
	fake.SignStub = nil
	fake.signReturns = struct {
		result1 []byte
		result2 *bccsp.IdemixSignerMetadata
		result3 error
	}{result1, result2, result3}
}

func (fake *SignatureScheme) SignReturnsOnCall(i int, result1 []byte, result2 *bccsp.IdemixSignerMetadata, result3 error) {
	fake.SignStub = nil
	if fake.signReturnsOnCall == nil {
		fake.signReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 *bccsp.IdemixSignerMetadata
			result3 error
		})
	}
	fake.signReturnsOnCall[i] = struct {
		result1 []byte
		result2 *bccsp.IdemixSignerMetadata
		result3 error
	}{result1, result2, result3}
}

func (fake *SignatureScheme) Verify(ipk handlers.IssuerPublicKey, signature []byte, msg []byte, attributes []bccsp.IdemixAttribute, rhIndex int, eidIndex int, revocationPublicKey *ecdsa.PublicKey, epoch int, verType bccsp.VerificationType, meta *bccsp.IdemixSignerMetadata) error {
	var signatureCopy []byte
	if signature != nil {
		signatureCopy = make([]byte, len(signature))
		copy(signatureCopy, signature)
	}
	var msgCopy []byte
	if msg != nil {
		msgCopy = make([]byte, len(msg))
		copy(msgCopy, msg)
	}
	var attributesCopy []bccsp.IdemixAttribute
	if attributes != nil {
		attributesCopy = make([]bccsp.IdemixAttribute, len(attributes))
		copy(attributesCopy, attributes)
	}
	fake.verifyMutex.Lock()
	ret, specificReturn := fake.verifyReturnsOnCall[len(fake.verifyArgsForCall)]
	fake.verifyArgsForCall = append(fake.verifyArgsForCall, struct {
		ipk                 handlers.IssuerPublicKey
		signature           []byte
		msg                 []byte
		attributes          []bccsp.IdemixAttribute
		rhIndex             int
		eidIndex            int
		revocationPublicKey *ecdsa.PublicKey
		epoch               int
		verType             bccsp.VerificationType
		meta                *bccsp.IdemixSignerMetadata
	}{ipk, signatureCopy, msgCopy, attributesCopy, rhIndex, eidIndex, revocationPublicKey, epoch, verType, meta})
	fake.recordInvocation("Verify", []interface{}{ipk, signatureCopy, msgCopy, attributesCopy, rhIndex, eidIndex, revocationPublicKey, epoch, verType, meta})
	fake.verifyMutex.Unlock()
	if fake.VerifyStub != nil {
		return fake.VerifyStub(ipk, signature, msg, attributes, rhIndex, eidIndex, revocationPublicKey, epoch, verType, meta)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.verifyReturns.result1
}

func (fake *SignatureScheme) VerifyCallCount() int {
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	return len(fake.verifyArgsForCall)
}

func (fake *SignatureScheme) VerifyArgsForCall(i int) (handlers.IssuerPublicKey, []byte, []byte, []bccsp.IdemixAttribute, int, int, *ecdsa.PublicKey, int, bccsp.VerificationType, *bccsp.IdemixSignerMetadata) {
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	return fake.verifyArgsForCall[i].ipk, fake.verifyArgsForCall[i].signature, fake.verifyArgsForCall[i].msg, fake.verifyArgsForCall[i].attributes, fake.verifyArgsForCall[i].rhIndex, fake.verifyArgsForCall[i].eidIndex, fake.verifyArgsForCall[i].revocationPublicKey, fake.verifyArgsForCall[i].epoch, fake.verifyArgsForCall[i].verType, fake.verifyArgsForCall[i].meta
}

func (fake *SignatureScheme) VerifyReturns(result1 error) {
	fake.VerifyStub = nil
	fake.verifyReturns = struct {
		result1 error
	}{result1}
}

func (fake *SignatureScheme) VerifyReturnsOnCall(i int, result1 error) {
	fake.VerifyStub = nil
	if fake.verifyReturnsOnCall == nil {
		fake.verifyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *SignatureScheme) AuditNymEid(ipk handlers.IssuerPublicKey, eidIndex int, signature []byte, enrollmentID string, RNymEid *math.Zr) error {
	var signatureCopy []byte
	if signature != nil {
		signatureCopy = make([]byte, len(signature))
		copy(signatureCopy, signature)
	}
	fake.auditNymEidMutex.Lock()
	ret, specificReturn := fake.auditNymEidReturnsOnCall[len(fake.auditNymEidArgsForCall)]
	fake.auditNymEidArgsForCall = append(fake.auditNymEidArgsForCall, struct {
		ipk          handlers.IssuerPublicKey
		eidIndex     int
		signature    []byte
		enrollmentID string
		RNymEid      *math.Zr
	}{ipk, eidIndex, signatureCopy, enrollmentID, RNymEid})
	fake.recordInvocation("AuditNymEid", []interface{}{ipk, eidIndex, signatureCopy, enrollmentID, RNymEid})
	fake.auditNymEidMutex.Unlock()
	if fake.AuditNymEidStub != nil {
		return fake.AuditNymEidStub(ipk, eidIndex, signature, enrollmentID, RNymEid)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.auditNymEidReturns.result1
}

func (fake *SignatureScheme) AuditNymEidCallCount() int {
	fake.auditNymEidMutex.RLock()
	defer fake.auditNymEidMutex.RUnlock()
	return len(fake.auditNymEidArgsForCall)
}

func (fake *SignatureScheme) AuditNymEidArgsForCall(i int) (handlers.IssuerPublicKey, int, []byte, string, *math.Zr) {
	fake.auditNymEidMutex.RLock()
	defer fake.auditNymEidMutex.RUnlock()
	return fake.auditNymEidArgsForCall[i].ipk, fake.auditNymEidArgsForCall[i].eidIndex, fake.auditNymEidArgsForCall[i].signature, fake.auditNymEidArgsForCall[i].enrollmentID, fake.auditNymEidArgsForCall[i].RNymEid
}

func (fake *SignatureScheme) AuditNymEidReturns(result1 error) {
	fake.AuditNymEidStub = nil
	fake.auditNymEidReturns = struct {
		result1 error
	}{result1}
}

func (fake *SignatureScheme) AuditNymEidReturnsOnCall(i int, result1 error) {
	fake.AuditNymEidStub = nil
	if fake.auditNymEidReturnsOnCall == nil {
		fake.auditNymEidReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.auditNymEidReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *SignatureScheme) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	fake.auditNymEidMutex.RLock()
	defer fake.auditNymEidMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SignatureScheme) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.SignatureScheme = new(SignatureScheme)
