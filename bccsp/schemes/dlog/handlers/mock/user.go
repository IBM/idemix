// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/IBM/idemix/bccsp/schemes/dlog/handlers"
	math "github.com/IBM/mathlib"
)

type User struct {
	MakeNymStub        func(*math.Zr, handlers.IssuerPublicKey) (*math.G1, *math.Zr, error)
	makeNymMutex       sync.RWMutex
	makeNymArgsForCall []struct {
		arg1 *math.Zr
		arg2 handlers.IssuerPublicKey
	}
	makeNymReturns struct {
		result1 *math.G1
		result2 *math.Zr
		result3 error
	}
	makeNymReturnsOnCall map[int]struct {
		result1 *math.G1
		result2 *math.Zr
		result3 error
	}
	NewKeyStub        func() (*math.Zr, error)
	newKeyMutex       sync.RWMutex
	newKeyArgsForCall []struct {
	}
	newKeyReturns struct {
		result1 *math.Zr
		result2 error
	}
	newKeyReturnsOnCall map[int]struct {
		result1 *math.Zr
		result2 error
	}
	NewKeyFromBytesStub        func([]byte) (*math.Zr, error)
	newKeyFromBytesMutex       sync.RWMutex
	newKeyFromBytesArgsForCall []struct {
		arg1 []byte
	}
	newKeyFromBytesReturns struct {
		result1 *math.Zr
		result2 error
	}
	newKeyFromBytesReturnsOnCall map[int]struct {
		result1 *math.Zr
		result2 error
	}
	NewNymFromBytesStub        func([]byte) (*math.G1, *math.Zr, error)
	newNymFromBytesMutex       sync.RWMutex
	newNymFromBytesArgsForCall []struct {
		arg1 []byte
	}
	newNymFromBytesReturns struct {
		result1 *math.G1
		result2 *math.Zr
		result3 error
	}
	newNymFromBytesReturnsOnCall map[int]struct {
		result1 *math.G1
		result2 *math.Zr
		result3 error
	}
	NewPublicNymFromBytesStub        func([]byte) (*math.G1, error)
	newPublicNymFromBytesMutex       sync.RWMutex
	newPublicNymFromBytesArgsForCall []struct {
		arg1 []byte
	}
	newPublicNymFromBytesReturns struct {
		result1 *math.G1
		result2 error
	}
	newPublicNymFromBytesReturnsOnCall map[int]struct {
		result1 *math.G1
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *User) MakeNym(arg1 *math.Zr, arg2 handlers.IssuerPublicKey) (*math.G1, *math.Zr, error) {
	fake.makeNymMutex.Lock()
	ret, specificReturn := fake.makeNymReturnsOnCall[len(fake.makeNymArgsForCall)]
	fake.makeNymArgsForCall = append(fake.makeNymArgsForCall, struct {
		arg1 *math.Zr
		arg2 handlers.IssuerPublicKey
	}{arg1, arg2})
	stub := fake.MakeNymStub
	fakeReturns := fake.makeNymReturns
	fake.recordInvocation("MakeNym", []interface{}{arg1, arg2})
	fake.makeNymMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *User) MakeNymCallCount() int {
	fake.makeNymMutex.RLock()
	defer fake.makeNymMutex.RUnlock()
	return len(fake.makeNymArgsForCall)
}

func (fake *User) MakeNymCalls(stub func(*math.Zr, handlers.IssuerPublicKey) (*math.G1, *math.Zr, error)) {
	fake.makeNymMutex.Lock()
	defer fake.makeNymMutex.Unlock()
	fake.MakeNymStub = stub
}

func (fake *User) MakeNymArgsForCall(i int) (*math.Zr, handlers.IssuerPublicKey) {
	fake.makeNymMutex.RLock()
	defer fake.makeNymMutex.RUnlock()
	argsForCall := fake.makeNymArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *User) MakeNymReturns(result1 *math.G1, result2 *math.Zr, result3 error) {
	fake.makeNymMutex.Lock()
	defer fake.makeNymMutex.Unlock()
	fake.MakeNymStub = nil
	fake.makeNymReturns = struct {
		result1 *math.G1
		result2 *math.Zr
		result3 error
	}{result1, result2, result3}
}

func (fake *User) MakeNymReturnsOnCall(i int, result1 *math.G1, result2 *math.Zr, result3 error) {
	fake.makeNymMutex.Lock()
	defer fake.makeNymMutex.Unlock()
	fake.MakeNymStub = nil
	if fake.makeNymReturnsOnCall == nil {
		fake.makeNymReturnsOnCall = make(map[int]struct {
			result1 *math.G1
			result2 *math.Zr
			result3 error
		})
	}
	fake.makeNymReturnsOnCall[i] = struct {
		result1 *math.G1
		result2 *math.Zr
		result3 error
	}{result1, result2, result3}
}

func (fake *User) NewKey() (*math.Zr, error) {
	fake.newKeyMutex.Lock()
	ret, specificReturn := fake.newKeyReturnsOnCall[len(fake.newKeyArgsForCall)]
	fake.newKeyArgsForCall = append(fake.newKeyArgsForCall, struct {
	}{})
	stub := fake.NewKeyStub
	fakeReturns := fake.newKeyReturns
	fake.recordInvocation("NewKey", []interface{}{})
	fake.newKeyMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *User) NewKeyCallCount() int {
	fake.newKeyMutex.RLock()
	defer fake.newKeyMutex.RUnlock()
	return len(fake.newKeyArgsForCall)
}

func (fake *User) NewKeyCalls(stub func() (*math.Zr, error)) {
	fake.newKeyMutex.Lock()
	defer fake.newKeyMutex.Unlock()
	fake.NewKeyStub = stub
}

func (fake *User) NewKeyReturns(result1 *math.Zr, result2 error) {
	fake.newKeyMutex.Lock()
	defer fake.newKeyMutex.Unlock()
	fake.NewKeyStub = nil
	fake.newKeyReturns = struct {
		result1 *math.Zr
		result2 error
	}{result1, result2}
}

func (fake *User) NewKeyReturnsOnCall(i int, result1 *math.Zr, result2 error) {
	fake.newKeyMutex.Lock()
	defer fake.newKeyMutex.Unlock()
	fake.NewKeyStub = nil
	if fake.newKeyReturnsOnCall == nil {
		fake.newKeyReturnsOnCall = make(map[int]struct {
			result1 *math.Zr
			result2 error
		})
	}
	fake.newKeyReturnsOnCall[i] = struct {
		result1 *math.Zr
		result2 error
	}{result1, result2}
}

func (fake *User) NewKeyFromBytes(arg1 []byte) (*math.Zr, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.newKeyFromBytesMutex.Lock()
	ret, specificReturn := fake.newKeyFromBytesReturnsOnCall[len(fake.newKeyFromBytesArgsForCall)]
	fake.newKeyFromBytesArgsForCall = append(fake.newKeyFromBytesArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.NewKeyFromBytesStub
	fakeReturns := fake.newKeyFromBytesReturns
	fake.recordInvocation("NewKeyFromBytes", []interface{}{arg1Copy})
	fake.newKeyFromBytesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *User) NewKeyFromBytesCallCount() int {
	fake.newKeyFromBytesMutex.RLock()
	defer fake.newKeyFromBytesMutex.RUnlock()
	return len(fake.newKeyFromBytesArgsForCall)
}

func (fake *User) NewKeyFromBytesCalls(stub func([]byte) (*math.Zr, error)) {
	fake.newKeyFromBytesMutex.Lock()
	defer fake.newKeyFromBytesMutex.Unlock()
	fake.NewKeyFromBytesStub = stub
}

func (fake *User) NewKeyFromBytesArgsForCall(i int) []byte {
	fake.newKeyFromBytesMutex.RLock()
	defer fake.newKeyFromBytesMutex.RUnlock()
	argsForCall := fake.newKeyFromBytesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *User) NewKeyFromBytesReturns(result1 *math.Zr, result2 error) {
	fake.newKeyFromBytesMutex.Lock()
	defer fake.newKeyFromBytesMutex.Unlock()
	fake.NewKeyFromBytesStub = nil
	fake.newKeyFromBytesReturns = struct {
		result1 *math.Zr
		result2 error
	}{result1, result2}
}

func (fake *User) NewKeyFromBytesReturnsOnCall(i int, result1 *math.Zr, result2 error) {
	fake.newKeyFromBytesMutex.Lock()
	defer fake.newKeyFromBytesMutex.Unlock()
	fake.NewKeyFromBytesStub = nil
	if fake.newKeyFromBytesReturnsOnCall == nil {
		fake.newKeyFromBytesReturnsOnCall = make(map[int]struct {
			result1 *math.Zr
			result2 error
		})
	}
	fake.newKeyFromBytesReturnsOnCall[i] = struct {
		result1 *math.Zr
		result2 error
	}{result1, result2}
}

func (fake *User) NewNymFromBytes(arg1 []byte) (*math.G1, *math.Zr, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.newNymFromBytesMutex.Lock()
	ret, specificReturn := fake.newNymFromBytesReturnsOnCall[len(fake.newNymFromBytesArgsForCall)]
	fake.newNymFromBytesArgsForCall = append(fake.newNymFromBytesArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.NewNymFromBytesStub
	fakeReturns := fake.newNymFromBytesReturns
	fake.recordInvocation("NewNymFromBytes", []interface{}{arg1Copy})
	fake.newNymFromBytesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *User) NewNymFromBytesCallCount() int {
	fake.newNymFromBytesMutex.RLock()
	defer fake.newNymFromBytesMutex.RUnlock()
	return len(fake.newNymFromBytesArgsForCall)
}

func (fake *User) NewNymFromBytesCalls(stub func([]byte) (*math.G1, *math.Zr, error)) {
	fake.newNymFromBytesMutex.Lock()
	defer fake.newNymFromBytesMutex.Unlock()
	fake.NewNymFromBytesStub = stub
}

func (fake *User) NewNymFromBytesArgsForCall(i int) []byte {
	fake.newNymFromBytesMutex.RLock()
	defer fake.newNymFromBytesMutex.RUnlock()
	argsForCall := fake.newNymFromBytesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *User) NewNymFromBytesReturns(result1 *math.G1, result2 *math.Zr, result3 error) {
	fake.newNymFromBytesMutex.Lock()
	defer fake.newNymFromBytesMutex.Unlock()
	fake.NewNymFromBytesStub = nil
	fake.newNymFromBytesReturns = struct {
		result1 *math.G1
		result2 *math.Zr
		result3 error
	}{result1, result2, result3}
}

func (fake *User) NewNymFromBytesReturnsOnCall(i int, result1 *math.G1, result2 *math.Zr, result3 error) {
	fake.newNymFromBytesMutex.Lock()
	defer fake.newNymFromBytesMutex.Unlock()
	fake.NewNymFromBytesStub = nil
	if fake.newNymFromBytesReturnsOnCall == nil {
		fake.newNymFromBytesReturnsOnCall = make(map[int]struct {
			result1 *math.G1
			result2 *math.Zr
			result3 error
		})
	}
	fake.newNymFromBytesReturnsOnCall[i] = struct {
		result1 *math.G1
		result2 *math.Zr
		result3 error
	}{result1, result2, result3}
}

func (fake *User) NewPublicNymFromBytes(arg1 []byte) (*math.G1, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.newPublicNymFromBytesMutex.Lock()
	ret, specificReturn := fake.newPublicNymFromBytesReturnsOnCall[len(fake.newPublicNymFromBytesArgsForCall)]
	fake.newPublicNymFromBytesArgsForCall = append(fake.newPublicNymFromBytesArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.NewPublicNymFromBytesStub
	fakeReturns := fake.newPublicNymFromBytesReturns
	fake.recordInvocation("NewPublicNymFromBytes", []interface{}{arg1Copy})
	fake.newPublicNymFromBytesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *User) NewPublicNymFromBytesCallCount() int {
	fake.newPublicNymFromBytesMutex.RLock()
	defer fake.newPublicNymFromBytesMutex.RUnlock()
	return len(fake.newPublicNymFromBytesArgsForCall)
}

func (fake *User) NewPublicNymFromBytesCalls(stub func([]byte) (*math.G1, error)) {
	fake.newPublicNymFromBytesMutex.Lock()
	defer fake.newPublicNymFromBytesMutex.Unlock()
	fake.NewPublicNymFromBytesStub = stub
}

func (fake *User) NewPublicNymFromBytesArgsForCall(i int) []byte {
	fake.newPublicNymFromBytesMutex.RLock()
	defer fake.newPublicNymFromBytesMutex.RUnlock()
	argsForCall := fake.newPublicNymFromBytesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *User) NewPublicNymFromBytesReturns(result1 *math.G1, result2 error) {
	fake.newPublicNymFromBytesMutex.Lock()
	defer fake.newPublicNymFromBytesMutex.Unlock()
	fake.NewPublicNymFromBytesStub = nil
	fake.newPublicNymFromBytesReturns = struct {
		result1 *math.G1
		result2 error
	}{result1, result2}
}

func (fake *User) NewPublicNymFromBytesReturnsOnCall(i int, result1 *math.G1, result2 error) {
	fake.newPublicNymFromBytesMutex.Lock()
	defer fake.newPublicNymFromBytesMutex.Unlock()
	fake.NewPublicNymFromBytesStub = nil
	if fake.newPublicNymFromBytesReturnsOnCall == nil {
		fake.newPublicNymFromBytesReturnsOnCall = make(map[int]struct {
			result1 *math.G1
			result2 error
		})
	}
	fake.newPublicNymFromBytesReturnsOnCall[i] = struct {
		result1 *math.G1
		result2 error
	}{result1, result2}
}

func (fake *User) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.makeNymMutex.RLock()
	defer fake.makeNymMutex.RUnlock()
	fake.newKeyMutex.RLock()
	defer fake.newKeyMutex.RUnlock()
	fake.newKeyFromBytesMutex.RLock()
	defer fake.newKeyFromBytesMutex.RUnlock()
	fake.newNymFromBytesMutex.RLock()
	defer fake.newNymFromBytesMutex.RUnlock()
	fake.newPublicNymFromBytesMutex.RLock()
	defer fake.newPublicNymFromBytesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *User) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.User = new(User)
