//
//Copyright IBM Corp. All Rights Reserved.
//
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: bccsp/schemes/dlog/crypto/idemix.proto

// The Identity Mixer protocols make use of pairings (bilinear maps) -
// functions that can be described as e: G1 x G2 -> GT  that
// map group elements from the source groups (G1 and G2) to the target group
// Such groups can be represented by the points on an elliptic curve

package idemix

import (
	amcl "github.com/IBM/idemix/bccsp/schemes/dlog/crypto/translator/amcl"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// IssuerPublicKey specifies an issuer public key that consists of
// attribute_names - a list of the attribute names of a credential issued by the issuer
// h_sk, h_rand, h_attrs, w, bar_g1, bar_g2 - group elements corresponding to the signing key, randomness, and attributes
// proof_c, proof_s compose a zero-knowledge proof of knowledge of the secret key
// hash is a hash of the public key appended to it
type IssuerPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeNames []string    `protobuf:"bytes,1,rep,name=attribute_names,json=attributeNames,proto3" json:"attribute_names,omitempty"`
	HSk            *amcl.ECP   `protobuf:"bytes,2,opt,name=h_sk,json=hSk,proto3" json:"h_sk,omitempty"`
	HRand          *amcl.ECP   `protobuf:"bytes,3,opt,name=h_rand,json=hRand,proto3" json:"h_rand,omitempty"`
	HAttrs         []*amcl.ECP `protobuf:"bytes,4,rep,name=h_attrs,json=hAttrs,proto3" json:"h_attrs,omitempty"`
	W              *amcl.ECP2  `protobuf:"bytes,5,opt,name=w,proto3" json:"w,omitempty"`
	BarG1          *amcl.ECP   `protobuf:"bytes,6,opt,name=bar_g1,json=barG1,proto3" json:"bar_g1,omitempty"`
	BarG2          *amcl.ECP   `protobuf:"bytes,7,opt,name=bar_g2,json=barG2,proto3" json:"bar_g2,omitempty"`
	ProofC         []byte      `protobuf:"bytes,8,opt,name=proof_c,json=proofC,proto3" json:"proof_c,omitempty"`
	ProofS         []byte      `protobuf:"bytes,9,opt,name=proof_s,json=proofS,proto3" json:"proof_s,omitempty"`
	Hash           []byte      `protobuf:"bytes,10,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *IssuerPublicKey) Reset() {
	*x = IssuerPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuerPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuerPublicKey) ProtoMessage() {}

func (x *IssuerPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuerPublicKey.ProtoReflect.Descriptor instead.
func (*IssuerPublicKey) Descriptor() ([]byte, []int) {
	return file_bccsp_schemes_dlog_crypto_idemix_proto_rawDescGZIP(), []int{0}
}

func (x *IssuerPublicKey) GetAttributeNames() []string {
	if x != nil {
		return x.AttributeNames
	}
	return nil
}

func (x *IssuerPublicKey) GetHSk() *amcl.ECP {
	if x != nil {
		return x.HSk
	}
	return nil
}

func (x *IssuerPublicKey) GetHRand() *amcl.ECP {
	if x != nil {
		return x.HRand
	}
	return nil
}

func (x *IssuerPublicKey) GetHAttrs() []*amcl.ECP {
	if x != nil {
		return x.HAttrs
	}
	return nil
}

func (x *IssuerPublicKey) GetW() *amcl.ECP2 {
	if x != nil {
		return x.W
	}
	return nil
}

func (x *IssuerPublicKey) GetBarG1() *amcl.ECP {
	if x != nil {
		return x.BarG1
	}
	return nil
}

func (x *IssuerPublicKey) GetBarG2() *amcl.ECP {
	if x != nil {
		return x.BarG2
	}
	return nil
}

func (x *IssuerPublicKey) GetProofC() []byte {
	if x != nil {
		return x.ProofC
	}
	return nil
}

func (x *IssuerPublicKey) GetProofS() []byte {
	if x != nil {
		return x.ProofS
	}
	return nil
}

func (x *IssuerPublicKey) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// IssuerKey specifies an issuer key pair that consists of
// ISk - the issuer secret key and
// IssuerPublicKey - the issuer public key
type IssuerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Isk []byte           `protobuf:"bytes,1,opt,name=isk,proto3" json:"isk,omitempty"`
	Ipk *IssuerPublicKey `protobuf:"bytes,2,opt,name=ipk,proto3" json:"ipk,omitempty"`
}

func (x *IssuerKey) Reset() {
	*x = IssuerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuerKey) ProtoMessage() {}

func (x *IssuerKey) ProtoReflect() protoreflect.Message {
	mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuerKey.ProtoReflect.Descriptor instead.
func (*IssuerKey) Descriptor() ([]byte, []int) {
	return file_bccsp_schemes_dlog_crypto_idemix_proto_rawDescGZIP(), []int{1}
}

func (x *IssuerKey) GetIsk() []byte {
	if x != nil {
		return x.Isk
	}
	return nil
}

func (x *IssuerKey) GetIpk() *IssuerPublicKey {
	if x != nil {
		return x.Ipk
	}
	return nil
}

// Credential specifies a credential object that consists of
// a, b, e, s - signature value
// attrs - attribute values
type Credential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A     *amcl.ECP `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B     *amcl.ECP `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
	E     []byte    `protobuf:"bytes,3,opt,name=e,proto3" json:"e,omitempty"`
	S     []byte    `protobuf:"bytes,4,opt,name=s,proto3" json:"s,omitempty"`
	Attrs [][]byte  `protobuf:"bytes,5,rep,name=attrs,proto3" json:"attrs,omitempty"`
}

func (x *Credential) Reset() {
	*x = Credential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_bccsp_schemes_dlog_crypto_idemix_proto_rawDescGZIP(), []int{2}
}

func (x *Credential) GetA() *amcl.ECP {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *Credential) GetB() *amcl.ECP {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *Credential) GetE() []byte {
	if x != nil {
		return x.E
	}
	return nil
}

func (x *Credential) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *Credential) GetAttrs() [][]byte {
	if x != nil {
		return x.Attrs
	}
	return nil
}

// CredRequest specifies a credential request object that consists of
// nym - a pseudonym, which is a commitment to the user secret
// issuer_nonce - a random nonce provided by the issuer
// proof_c, proof_s - a zero-knowledge proof of knowledge of the
// user secret inside Nym
type CredRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nym         *amcl.ECP `protobuf:"bytes,1,opt,name=nym,proto3" json:"nym,omitempty"`
	IssuerNonce []byte    `protobuf:"bytes,2,opt,name=issuer_nonce,json=issuerNonce,proto3" json:"issuer_nonce,omitempty"`
	ProofC      []byte    `protobuf:"bytes,3,opt,name=proof_c,json=proofC,proto3" json:"proof_c,omitempty"`
	ProofS      []byte    `protobuf:"bytes,4,opt,name=proof_s,json=proofS,proto3" json:"proof_s,omitempty"`
}

func (x *CredRequest) Reset() {
	*x = CredRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredRequest) ProtoMessage() {}

func (x *CredRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredRequest.ProtoReflect.Descriptor instead.
func (*CredRequest) Descriptor() ([]byte, []int) {
	return file_bccsp_schemes_dlog_crypto_idemix_proto_rawDescGZIP(), []int{3}
}

func (x *CredRequest) GetNym() *amcl.ECP {
	if x != nil {
		return x.Nym
	}
	return nil
}

func (x *CredRequest) GetIssuerNonce() []byte {
	if x != nil {
		return x.IssuerNonce
	}
	return nil
}

func (x *CredRequest) GetProofC() []byte {
	if x != nil {
		return x.ProofC
	}
	return nil
}

func (x *CredRequest) GetProofS() []byte {
	if x != nil {
		return x.ProofS
	}
	return nil
}

type EIDNym struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nym       *amcl.ECP `protobuf:"bytes,1,opt,name=nym,proto3" json:"nym,omitempty"`
	ProofSEid []byte    `protobuf:"bytes,2,opt,name=proof_s_eid,json=proofSEid,proto3" json:"proof_s_eid,omitempty"`
}

func (x *EIDNym) Reset() {
	*x = EIDNym{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EIDNym) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EIDNym) ProtoMessage() {}

func (x *EIDNym) ProtoReflect() protoreflect.Message {
	mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EIDNym.ProtoReflect.Descriptor instead.
func (*EIDNym) Descriptor() ([]byte, []int) {
	return file_bccsp_schemes_dlog_crypto_idemix_proto_rawDescGZIP(), []int{4}
}

func (x *EIDNym) GetNym() *amcl.ECP {
	if x != nil {
		return x.Nym
	}
	return nil
}

func (x *EIDNym) GetProofSEid() []byte {
	if x != nil {
		return x.ProofSEid
	}
	return nil
}

type RHNym struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nym      *amcl.ECP `protobuf:"bytes,1,opt,name=nym,proto3" json:"nym,omitempty"`
	ProofSRh []byte    `protobuf:"bytes,2,opt,name=proof_s_rh,json=proofSRh,proto3" json:"proof_s_rh,omitempty"`
}

func (x *RHNym) Reset() {
	*x = RHNym{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RHNym) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RHNym) ProtoMessage() {}

func (x *RHNym) ProtoReflect() protoreflect.Message {
	mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RHNym.ProtoReflect.Descriptor instead.
func (*RHNym) Descriptor() ([]byte, []int) {
	return file_bccsp_schemes_dlog_crypto_idemix_proto_rawDescGZIP(), []int{5}
}

func (x *RHNym) GetNym() *amcl.ECP {
	if x != nil {
		return x.Nym
	}
	return nil
}

func (x *RHNym) GetProofSRh() []byte {
	if x != nil {
		return x.ProofSRh
	}
	return nil
}

// Signature specifies a signature object that consists of
// a_prime, a_bar, b_prime, proof_* - randomized credential signature values
// and a zero-knowledge proof of knowledge of a credential
// and the corresponding user secret together with the attribute values
// nonce - a fresh nonce used for the signature
// nym - a fresh pseudonym (a commitment to to the user secret)
type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	APrime             *amcl.ECP           `protobuf:"bytes,1,opt,name=a_prime,json=aPrime,proto3" json:"a_prime,omitempty"`
	ABar               *amcl.ECP           `protobuf:"bytes,2,opt,name=a_bar,json=aBar,proto3" json:"a_bar,omitempty"`
	BPrime             *amcl.ECP           `protobuf:"bytes,3,opt,name=b_prime,json=bPrime,proto3" json:"b_prime,omitempty"`
	ProofC             []byte              `protobuf:"bytes,4,opt,name=proof_c,json=proofC,proto3" json:"proof_c,omitempty"`
	ProofSSk           []byte              `protobuf:"bytes,5,opt,name=proof_s_sk,json=proofSSk,proto3" json:"proof_s_sk,omitempty"`
	ProofSE            []byte              `protobuf:"bytes,6,opt,name=proof_s_e,json=proofSE,proto3" json:"proof_s_e,omitempty"`
	ProofSR2           []byte              `protobuf:"bytes,7,opt,name=proof_s_r2,json=proofSR2,proto3" json:"proof_s_r2,omitempty"`
	ProofSR3           []byte              `protobuf:"bytes,8,opt,name=proof_s_r3,json=proofSR3,proto3" json:"proof_s_r3,omitempty"`
	ProofSSPrime       []byte              `protobuf:"bytes,9,opt,name=proof_s_s_prime,json=proofSSPrime,proto3" json:"proof_s_s_prime,omitempty"`
	ProofSAttrs        [][]byte            `protobuf:"bytes,10,rep,name=proof_s_attrs,json=proofSAttrs,proto3" json:"proof_s_attrs,omitempty"`
	Nonce              []byte              `protobuf:"bytes,11,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Nym                *amcl.ECP           `protobuf:"bytes,12,opt,name=nym,proto3" json:"nym,omitempty"`
	ProofSRNym         []byte              `protobuf:"bytes,13,opt,name=proof_s_r_nym,json=proofSRNym,proto3" json:"proof_s_r_nym,omitempty"`
	RevocationEpochPk  *amcl.ECP2          `protobuf:"bytes,14,opt,name=revocation_epoch_pk,json=revocationEpochPk,proto3" json:"revocation_epoch_pk,omitempty"`
	RevocationPkSig    []byte              `protobuf:"bytes,15,opt,name=revocation_pk_sig,json=revocationPkSig,proto3" json:"revocation_pk_sig,omitempty"`
	Epoch              int64               `protobuf:"varint,16,opt,name=epoch,proto3" json:"epoch,omitempty"`
	NonRevocationProof *NonRevocationProof `protobuf:"bytes,17,opt,name=non_revocation_proof,json=nonRevocationProof,proto3" json:"non_revocation_proof,omitempty"`
	EidNym             *EIDNym             `protobuf:"bytes,18,opt,name=eid_nym,json=eidNym,proto3" json:"eid_nym,omitempty"`
	RhNym              *RHNym              `protobuf:"bytes,19,opt,name=rh_nym,json=rhNym,proto3" json:"rh_nym,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_bccsp_schemes_dlog_crypto_idemix_proto_rawDescGZIP(), []int{6}
}

func (x *Signature) GetAPrime() *amcl.ECP {
	if x != nil {
		return x.APrime
	}
	return nil
}

func (x *Signature) GetABar() *amcl.ECP {
	if x != nil {
		return x.ABar
	}
	return nil
}

func (x *Signature) GetBPrime() *amcl.ECP {
	if x != nil {
		return x.BPrime
	}
	return nil
}

func (x *Signature) GetProofC() []byte {
	if x != nil {
		return x.ProofC
	}
	return nil
}

func (x *Signature) GetProofSSk() []byte {
	if x != nil {
		return x.ProofSSk
	}
	return nil
}

func (x *Signature) GetProofSE() []byte {
	if x != nil {
		return x.ProofSE
	}
	return nil
}

func (x *Signature) GetProofSR2() []byte {
	if x != nil {
		return x.ProofSR2
	}
	return nil
}

func (x *Signature) GetProofSR3() []byte {
	if x != nil {
		return x.ProofSR3
	}
	return nil
}

func (x *Signature) GetProofSSPrime() []byte {
	if x != nil {
		return x.ProofSSPrime
	}
	return nil
}

func (x *Signature) GetProofSAttrs() [][]byte {
	if x != nil {
		return x.ProofSAttrs
	}
	return nil
}

func (x *Signature) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Signature) GetNym() *amcl.ECP {
	if x != nil {
		return x.Nym
	}
	return nil
}

func (x *Signature) GetProofSRNym() []byte {
	if x != nil {
		return x.ProofSRNym
	}
	return nil
}

func (x *Signature) GetRevocationEpochPk() *amcl.ECP2 {
	if x != nil {
		return x.RevocationEpochPk
	}
	return nil
}

func (x *Signature) GetRevocationPkSig() []byte {
	if x != nil {
		return x.RevocationPkSig
	}
	return nil
}

func (x *Signature) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Signature) GetNonRevocationProof() *NonRevocationProof {
	if x != nil {
		return x.NonRevocationProof
	}
	return nil
}

func (x *Signature) GetEidNym() *EIDNym {
	if x != nil {
		return x.EidNym
	}
	return nil
}

func (x *Signature) GetRhNym() *RHNym {
	if x != nil {
		return x.RhNym
	}
	return nil
}

// NonRevocationProof contains proof that the credential is not revoked
type NonRevocationProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevocationAlg      int32  `protobuf:"varint,1,opt,name=revocation_alg,json=revocationAlg,proto3" json:"revocation_alg,omitempty"`
	NonRevocationProof []byte `protobuf:"bytes,2,opt,name=non_revocation_proof,json=nonRevocationProof,proto3" json:"non_revocation_proof,omitempty"`
}

func (x *NonRevocationProof) Reset() {
	*x = NonRevocationProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonRevocationProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonRevocationProof) ProtoMessage() {}

func (x *NonRevocationProof) ProtoReflect() protoreflect.Message {
	mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonRevocationProof.ProtoReflect.Descriptor instead.
func (*NonRevocationProof) Descriptor() ([]byte, []int) {
	return file_bccsp_schemes_dlog_crypto_idemix_proto_rawDescGZIP(), []int{7}
}

func (x *NonRevocationProof) GetRevocationAlg() int32 {
	if x != nil {
		return x.RevocationAlg
	}
	return 0
}

func (x *NonRevocationProof) GetNonRevocationProof() []byte {
	if x != nil {
		return x.NonRevocationProof
	}
	return nil
}

// NymSignature specifies a signature object that signs a message
// with respect to a pseudonym. It differs from the standard idemix.signature in the fact that
// the  standard signature object also proves that the pseudonym is based on a secret certified by
// a CA (issuer), whereas NymSignature only proves that the the owner of the pseudonym
// signed the message
type NymSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// proof_c is the Fiat-Shamir challenge of the ZKP
	ProofC []byte `protobuf:"bytes,1,opt,name=proof_c,json=proofC,proto3" json:"proof_c,omitempty"`
	// proof_s_sk is the s-value proving knowledge of the user secret key
	ProofSSk []byte `protobuf:"bytes,2,opt,name=proof_s_sk,json=proofSSk,proto3" json:"proof_s_sk,omitempty"`
	//proof_s_r_nym is the s-value proving knowledge of the pseudonym secret
	ProofSRNym []byte `protobuf:"bytes,3,opt,name=proof_s_r_nym,json=proofSRNym,proto3" json:"proof_s_r_nym,omitempty"`
	// nonce is a fresh nonce used for the signature
	Nonce []byte `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *NymSignature) Reset() {
	*x = NymSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NymSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NymSignature) ProtoMessage() {}

func (x *NymSignature) ProtoReflect() protoreflect.Message {
	mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NymSignature.ProtoReflect.Descriptor instead.
func (*NymSignature) Descriptor() ([]byte, []int) {
	return file_bccsp_schemes_dlog_crypto_idemix_proto_rawDescGZIP(), []int{8}
}

func (x *NymSignature) GetProofC() []byte {
	if x != nil {
		return x.ProofC
	}
	return nil
}

func (x *NymSignature) GetProofSSk() []byte {
	if x != nil {
		return x.ProofSSk
	}
	return nil
}

func (x *NymSignature) GetProofSRNym() []byte {
	if x != nil {
		return x.ProofSRNym
	}
	return nil
}

func (x *NymSignature) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type CredentialRevocationInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// epoch contains the epoch (time window) in which this CRI is valid
	Epoch int64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// epoch_pk is the public key that is used by the revocation authority in this epoch
	EpochPk *amcl.ECP2 `protobuf:"bytes,2,opt,name=epoch_pk,json=epochPk,proto3" json:"epoch_pk,omitempty"`
	// epoch_pk_sig is a signature on the EpochPK valid under the revocation authority's long term key
	EpochPkSig []byte `protobuf:"bytes,3,opt,name=epoch_pk_sig,json=epochPkSig,proto3" json:"epoch_pk_sig,omitempty"`
	// revocation_alg denotes which revocation algorithm is used
	RevocationAlg int32 `protobuf:"varint,4,opt,name=revocation_alg,json=revocationAlg,proto3" json:"revocation_alg,omitempty"`
	// revocation_data contains data specific to the revocation algorithm used
	RevocationData []byte `protobuf:"bytes,5,opt,name=revocation_data,json=revocationData,proto3" json:"revocation_data,omitempty"`
}

func (x *CredentialRevocationInformation) Reset() {
	*x = CredentialRevocationInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialRevocationInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialRevocationInformation) ProtoMessage() {}

func (x *CredentialRevocationInformation) ProtoReflect() protoreflect.Message {
	mi := &file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialRevocationInformation.ProtoReflect.Descriptor instead.
func (*CredentialRevocationInformation) Descriptor() ([]byte, []int) {
	return file_bccsp_schemes_dlog_crypto_idemix_proto_rawDescGZIP(), []int{9}
}

func (x *CredentialRevocationInformation) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CredentialRevocationInformation) GetEpochPk() *amcl.ECP2 {
	if x != nil {
		return x.EpochPk
	}
	return nil
}

func (x *CredentialRevocationInformation) GetEpochPkSig() []byte {
	if x != nil {
		return x.EpochPkSig
	}
	return nil
}

func (x *CredentialRevocationInformation) GetRevocationAlg() int32 {
	if x != nil {
		return x.RevocationAlg
	}
	return 0
}

func (x *CredentialRevocationInformation) GetRevocationData() []byte {
	if x != nil {
		return x.RevocationData
	}
	return nil
}

var File_bccsp_schemes_dlog_crypto_idemix_proto protoreflect.FileDescriptor

var file_bccsp_schemes_dlog_crypto_idemix_proto_rawDesc = []byte{
	0x0a, 0x26, 0x62, 0x63, 0x63, 0x73, 0x70, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x2f,
	0x64, 0x6c, 0x6f, 0x67, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x69, 0x64, 0x65, 0x6d,
	0x69, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x69, 0x64, 0x65, 0x6d, 0x69, 0x78,
	0x1a, 0x34, 0x62, 0x63, 0x63, 0x73, 0x70, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x2f,
	0x64, 0x6c, 0x6f, 0x67, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x6d, 0x63, 0x6c, 0x2f, 0x61, 0x6d, 0x63, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x02, 0x0a, 0x0f, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x68, 0x5f, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x61, 0x6d, 0x63, 0x6c, 0x2e, 0x45, 0x43, 0x50, 0x52, 0x03, 0x68, 0x53,
	0x6b, 0x12, 0x20, 0x0a, 0x06, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x61, 0x6d, 0x63, 0x6c, 0x2e, 0x45, 0x43, 0x50, 0x52, 0x05, 0x68, 0x52,
	0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x6d, 0x63, 0x6c, 0x2e, 0x45, 0x43, 0x50, 0x52,
	0x06, 0x68, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x01, 0x77, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x6d, 0x63, 0x6c, 0x2e, 0x45, 0x43, 0x50, 0x32, 0x52, 0x01,
	0x77, 0x12, 0x20, 0x0a, 0x06, 0x62, 0x61, 0x72, 0x5f, 0x67, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x61, 0x6d, 0x63, 0x6c, 0x2e, 0x45, 0x43, 0x50, 0x52, 0x05, 0x62, 0x61,
	0x72, 0x47, 0x31, 0x12, 0x20, 0x0a, 0x06, 0x62, 0x61, 0x72, 0x5f, 0x67, 0x32, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x6d, 0x63, 0x6c, 0x2e, 0x45, 0x43, 0x50, 0x52, 0x05,
	0x62, 0x61, 0x72, 0x47, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x63,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x48, 0x0a, 0x09, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x69, 0x73, 0x6b, 0x12, 0x29, 0x0a, 0x03, 0x69, 0x70,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x64, 0x65, 0x6d, 0x69, 0x78,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x69, 0x70, 0x6b, 0x22, 0x70, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x61, 0x6d, 0x63, 0x6c, 0x2e, 0x45, 0x43, 0x50, 0x52, 0x01, 0x61, 0x12, 0x17, 0x0a, 0x01,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x6d, 0x63, 0x6c, 0x2e, 0x45,
	0x43, 0x50, 0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x01, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x22, 0x7f, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x03, 0x6e, 0x79, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x6d, 0x63, 0x6c, 0x2e, 0x45, 0x43, 0x50, 0x52, 0x03,
	0x6e, 0x79, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x22, 0x45, 0x0a, 0x06, 0x45, 0x49, 0x44, 0x4e,
	0x79, 0x6d, 0x12, 0x1b, 0x0a, 0x03, 0x6e, 0x79, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x61, 0x6d, 0x63, 0x6c, 0x2e, 0x45, 0x43, 0x50, 0x52, 0x03, 0x6e, 0x79, 0x6d, 0x12,
	0x1e, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x73, 0x5f, 0x65, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x45, 0x69, 0x64, 0x22,
	0x42, 0x0a, 0x05, 0x52, 0x48, 0x4e, 0x79, 0x6d, 0x12, 0x1b, 0x0a, 0x03, 0x6e, 0x79, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x6d, 0x63, 0x6c, 0x2e, 0x45, 0x43, 0x50,
	0x52, 0x03, 0x6e, 0x79, 0x6d, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x73,
	0x5f, 0x72, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x53, 0x52, 0x68, 0x22, 0xbe, 0x05, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x22, 0x0a, 0x07, 0x61, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x6d, 0x63, 0x6c, 0x2e, 0x45, 0x43, 0x50, 0x52, 0x06, 0x61,
	0x50, 0x72, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x61, 0x5f, 0x62, 0x61, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x6d, 0x63, 0x6c, 0x2e, 0x45, 0x43, 0x50, 0x52,
	0x04, 0x61, 0x42, 0x61, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x6d, 0x63, 0x6c, 0x2e, 0x45, 0x43,
	0x50, 0x52, 0x06, 0x62, 0x50, 0x72, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x5f, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x43, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x73, 0x5f, 0x73, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x53, 0x6b,
	0x12, 0x1a, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x73, 0x5f, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x45, 0x12, 0x1c, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x73, 0x5f, 0x72, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x52, 0x32, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x5f, 0x73, 0x5f, 0x72, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x52, 0x33, 0x12, 0x25, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x5f, 0x73, 0x5f, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x53, 0x50, 0x72, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x41, 0x74,
	0x74, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x6e, 0x79, 0x6d,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x6d, 0x63, 0x6c, 0x2e, 0x45, 0x43,
	0x50, 0x52, 0x03, 0x6e, 0x79, 0x6d, 0x12, 0x21, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f,
	0x73, 0x5f, 0x72, 0x5f, 0x6e, 0x79, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x53, 0x52, 0x4e, 0x79, 0x6d, 0x12, 0x3a, 0x0a, 0x13, 0x72, 0x65, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x70, 0x6b,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x6d, 0x63, 0x6c, 0x2e, 0x45, 0x43,
	0x50, 0x32, 0x52, 0x11, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x50, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6b, 0x53, 0x69,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x4c, 0x0a, 0x14, 0x6e, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x4e,
	0x6f, 0x6e, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x52, 0x12, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x69, 0x64, 0x5f, 0x6e, 0x79, 0x6d,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x2e,
	0x45, 0x49, 0x44, 0x4e, 0x79, 0x6d, 0x52, 0x06, 0x65, 0x69, 0x64, 0x4e, 0x79, 0x6d, 0x12, 0x24,
	0x0a, 0x06, 0x72, 0x68, 0x5f, 0x6e, 0x79, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x69, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x48, 0x4e, 0x79, 0x6d, 0x52, 0x05, 0x72,
	0x68, 0x4e, 0x79, 0x6d, 0x22, 0x6d, 0x0a, 0x12, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x67, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x12, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x22, 0x7e, 0x0a, 0x0c, 0x4e, 0x79, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x12, 0x1c, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x73, 0x5f, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x53, 0x6b, 0x12, 0x21, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x5f, 0x73, 0x5f, 0x72, 0x5f, 0x6e, 0x79, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x52, 0x4e, 0x79, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x25, 0x0a,
	0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x70, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x61, 0x6d, 0x63, 0x6c, 0x2e, 0x45, 0x43, 0x50, 0x32, 0x52, 0x07, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x50, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x70, 0x6b,
	0x5f, 0x73, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x50, 0x6b, 0x53, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x82, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x69,
	0x64, 0x65, 0x6d, 0x69, 0x78, 0x42, 0x0b, 0x49, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x49, 0x42, 0x4d, 0x2f, 0x69, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x2f, 0x62, 0x63, 0x63, 0x73,
	0x70, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x2f, 0x64, 0x6c, 0x6f, 0x67, 0x2f, 0x69,
	0x64, 0x65, 0x6d, 0x69, 0x78, 0xa2, 0x02, 0x03, 0x49, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x49, 0x64,
	0x65, 0x6d, 0x69, 0x78, 0xca, 0x02, 0x06, 0x49, 0x64, 0x65, 0x6d, 0x69, 0x78, 0xe2, 0x02, 0x12,
	0x49, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x06, 0x49, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_bccsp_schemes_dlog_crypto_idemix_proto_rawDescOnce sync.Once
	file_bccsp_schemes_dlog_crypto_idemix_proto_rawDescData = file_bccsp_schemes_dlog_crypto_idemix_proto_rawDesc
)

func file_bccsp_schemes_dlog_crypto_idemix_proto_rawDescGZIP() []byte {
	file_bccsp_schemes_dlog_crypto_idemix_proto_rawDescOnce.Do(func() {
		file_bccsp_schemes_dlog_crypto_idemix_proto_rawDescData = protoimpl.X.CompressGZIP(file_bccsp_schemes_dlog_crypto_idemix_proto_rawDescData)
	})
	return file_bccsp_schemes_dlog_crypto_idemix_proto_rawDescData
}

var file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_bccsp_schemes_dlog_crypto_idemix_proto_goTypes = []interface{}{
	(*IssuerPublicKey)(nil),                 // 0: idemix.IssuerPublicKey
	(*IssuerKey)(nil),                       // 1: idemix.IssuerKey
	(*Credential)(nil),                      // 2: idemix.Credential
	(*CredRequest)(nil),                     // 3: idemix.CredRequest
	(*EIDNym)(nil),                          // 4: idemix.EIDNym
	(*RHNym)(nil),                           // 5: idemix.RHNym
	(*Signature)(nil),                       // 6: idemix.Signature
	(*NonRevocationProof)(nil),              // 7: idemix.NonRevocationProof
	(*NymSignature)(nil),                    // 8: idemix.NymSignature
	(*CredentialRevocationInformation)(nil), // 9: idemix.CredentialRevocationInformation
	(*amcl.ECP)(nil),                        // 10: amcl.ECP
	(*amcl.ECP2)(nil),                       // 11: amcl.ECP2
}
var file_bccsp_schemes_dlog_crypto_idemix_proto_depIdxs = []int32{
	10, // 0: idemix.IssuerPublicKey.h_sk:type_name -> amcl.ECP
	10, // 1: idemix.IssuerPublicKey.h_rand:type_name -> amcl.ECP
	10, // 2: idemix.IssuerPublicKey.h_attrs:type_name -> amcl.ECP
	11, // 3: idemix.IssuerPublicKey.w:type_name -> amcl.ECP2
	10, // 4: idemix.IssuerPublicKey.bar_g1:type_name -> amcl.ECP
	10, // 5: idemix.IssuerPublicKey.bar_g2:type_name -> amcl.ECP
	0,  // 6: idemix.IssuerKey.ipk:type_name -> idemix.IssuerPublicKey
	10, // 7: idemix.Credential.a:type_name -> amcl.ECP
	10, // 8: idemix.Credential.b:type_name -> amcl.ECP
	10, // 9: idemix.CredRequest.nym:type_name -> amcl.ECP
	10, // 10: idemix.EIDNym.nym:type_name -> amcl.ECP
	10, // 11: idemix.RHNym.nym:type_name -> amcl.ECP
	10, // 12: idemix.Signature.a_prime:type_name -> amcl.ECP
	10, // 13: idemix.Signature.a_bar:type_name -> amcl.ECP
	10, // 14: idemix.Signature.b_prime:type_name -> amcl.ECP
	10, // 15: idemix.Signature.nym:type_name -> amcl.ECP
	11, // 16: idemix.Signature.revocation_epoch_pk:type_name -> amcl.ECP2
	7,  // 17: idemix.Signature.non_revocation_proof:type_name -> idemix.NonRevocationProof
	4,  // 18: idemix.Signature.eid_nym:type_name -> idemix.EIDNym
	5,  // 19: idemix.Signature.rh_nym:type_name -> idemix.RHNym
	11, // 20: idemix.CredentialRevocationInformation.epoch_pk:type_name -> amcl.ECP2
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_bccsp_schemes_dlog_crypto_idemix_proto_init() }
func file_bccsp_schemes_dlog_crypto_idemix_proto_init() {
	if File_bccsp_schemes_dlog_crypto_idemix_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssuerPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssuerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EIDNym); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RHNym); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonRevocationProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NymSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialRevocationInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bccsp_schemes_dlog_crypto_idemix_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bccsp_schemes_dlog_crypto_idemix_proto_goTypes,
		DependencyIndexes: file_bccsp_schemes_dlog_crypto_idemix_proto_depIdxs,
		MessageInfos:      file_bccsp_schemes_dlog_crypto_idemix_proto_msgTypes,
	}.Build()
	File_bccsp_schemes_dlog_crypto_idemix_proto = out.File
	file_bccsp_schemes_dlog_crypto_idemix_proto_rawDesc = nil
	file_bccsp_schemes_dlog_crypto_idemix_proto_goTypes = nil
	file_bccsp_schemes_dlog_crypto_idemix_proto_depIdxs = nil
}
